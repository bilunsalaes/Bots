<!--
Copyright (c) 2010, Daniel De Sousa (daniel@dandesousa.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE
 -->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:CampahApp">




    <!-- Numeric Control Override -->
    <Style TargetType="Button" x:Key="NumericControlButtonStyle">
        <Style.Resources>
            <LinearGradientBrush x:Key="ButtonBrush" StartPoint="0,0" EndPoint="0,1" >
                <GradientStop Color="{DynamicResource {x:Static SystemColors.ControlLightLightColorKey}}" Offset="0.10"/>
                <GradientStop Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}" Offset=".80"/>
            </LinearGradientBrush>
        </Style.Resources>

        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border 
                      x:Name="Border"  
                      CornerRadius="0" 
                      BorderThickness="1"
                      Background="{DynamicResource ButtonBrush}"
                       
                      BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter 
                            Margin="2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>


    <!-- Control Templates for Numeric Spinner Control-->
    <Style TargetType="{x:Type local:NumericSpinnerControl}">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:NumericSpinnerControl}">
                    <Border
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}">
                        <DockPanel >
                            <UniformGrid Margin="0 1 0 1" Width="10" DockPanel.Dock="Right" Columns="1" >

                                <!-- Increment Button -->
                                <Button x:Name="PART_IncrementButton" Style="{StaticResource NumericControlButtonStyle}">
                                    <Button.Content>
                                        <Viewbox Stretch="Uniform" Margin="0 1 0 0">

                                            <Path Stroke="{x:Static SystemColors.ControlTextBrush}" StrokeThickness="8" Data="M 0,0 L 15,15 L 30,0">
                                                <Path.RenderTransform>
                                                    <RotateTransform CenterX="15" CenterY="7.5" Angle="180"/>
                                                </Path.RenderTransform>
                                            </Path>
                                        </Viewbox>
                                    </Button.Content>
                                </Button>

                                <!-- Decrement Button -->
                                <Button x:Name="PART_DecrementButton" Style="{StaticResource NumericControlButtonStyle}" >

                                    <Button.Content>
                                        <Viewbox Stretch="Uniform" Margin="0 1 0 0">
                                            <Path Stroke="{x:Static SystemColors.ControlTextBrush}" StrokeThickness="8" Data="M 0,0 L 15,15 L 30,0"/>
                                        </Viewbox>
                                    </Button.Content>

                                </Button>
                            </UniformGrid>

                            <!-- TextBox -->
                            <TextBox x:Name="PART_NumericTextBox" Background="{TemplateBinding Background}"
                                     TextAlignment="Right" VerticalContentAlignment="Center" 
                                     Margin="0 1 0 1"  DockPanel.Dock="Left"/>
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
